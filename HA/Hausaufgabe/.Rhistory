library(readxl)
library(readxl)
library(readxl)
library(tidyverse)
excel_sheets("dateien.xlsx")
excel_sheets("C:\Users\justi\Documents\GitHub\Module_DataQualityEngineering\HA\Hausaufgabe\dateien.xlsx")
library(readxl)
library(tidyverse)
excel_sheets("\justi\Documents\GitHub\Module_DataQualityEngineering\HA\Hausaufgabe\dateien.xlsx")
excel_sheets("justi\Documents\GitHub\Module_DataQualityEngineering\HA\Hausaufgabe\dateien.xlsx")
excel_sheets("justi\Documents\GitHub\Module_DataQualityEngineering\HA\Hausaufgabe\dateien.xlsx")
excel_sheets("dateien.xlsx")
setwd("~/GitHub/Module_DataQualityEngineering/HA/Hausaufgabe")
#Ortsauswahl
ortauswahl <- read_excel("dateien.xlsx", sheet=1)
library(readxl)
library(tidyverse)
excel_sheets("dateien.xlsx")
#Ortsauswahl
ortauswahl <- read_excel("dateien.xlsx", sheet=1)
#Standardisierung
standardisierung <- read_excel("dateien.xlsx", sheet=2)
#Versuchplan
versuchplan <- read_excel("dateien.xlsx", sheet=3)
#Steepest Ascent
steepest_ascent <- read_excel("dateien.xlsx", sheet=4)
View(steepest_ascent)
View(steepest_ascent)
View(versuchplan)
knitr::opts_chunk$set(echo = TRUE)
library(DescTools)
install.packages("DescTools")
library(DescTools)
library(qualityTools)
library(tidyverse)
library(readxl)
if (!require(nortest)) {
install.packages("nortest")
require(nortest)
}
library(nortest)
#Zuerst werden die Ortsauswahl Daten nach den Orten gruppiert, damit es leichter ist und weniger Zeit verbraucht, zusammengefasst zu werden..
#grouped
ortsauswahl_grouped <- ortauswahl %>% group_by(Ort) %>% mutate(mean_flugdauer = mean(Flugdauer), var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2))
#mithilfe der Funktion "summarize" wird dann die statistischen Kennzahlen einzelner Orten zusammengefasst. Diese Daten werden dann für die graphische Darstellung benötigt.
#summarized
ortsauswahl_summarized <- ortauswahl %>% group_by(Ort) %>% summarize(mean_flugdauer = mean(Flugdauer), var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2)) %>% mutate(Cp = Toleranz/(6*sd_flugdauer))
#Zuerst werden die Ortsauswahl Daten nach den Orten gruppiert, damit es leichter ist und weniger Zeit verbraucht, zusammengefasst zu werden..
#grouped
ortsauswahl_grouped <- ortauswahl %>% group_by(Ort) %>% mutate(mean_flugdauer = mean(Flugdauer), var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2))
#mithilfe der Funktion "summarize" wird dann die statistischen Kennzahlen einzelner Orten zusammengefasst. Diese Daten werden dann für die graphische Darstellung benötigt.
Toleranz <- 1 #nach Aufgabenstellung
#summarized
ortsauswahl_summarized <- ortauswahl %>% group_by(Ort) %>% summarize(mean_flugdauer = mean(Flugdauer), var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2)) %>% mutate(Cp = Toleranz/(6*sd_flugdauer))
#Buat Vergleich Standardisierung
ortsauswahl_all <- ortauswahl %>% summarize(mean_flugdauer = mean(Flugdauer), var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2), Cp = Toleranz/(6*sd_flugdauer)) %>% mutate(Ort = "Gesamt")
final <- ortsauswahl_summarized %>% full_join(ortsauswahl_all)
final
#unter Annahme, dass alle normalverteilt sind, und nur Cp kein Cpk, da der Sollwert unbekannt ist, und wir wollen den zu diesem Zeitpunkt noch nicht annehmen. Cp hängt per se nur von der Toleranzbreite ab.
#die zwei größten Cps sind bei EW und H Gebäude. Cp von EW liegt knapp unter 1.33 es kann, also noch angenommen werden, dass mit mehr Versuchen einen höheren Cp Wert zubekommen ist. für die weiteren Versuche wird der Ort EW als Standard festgestellt. am Ort "EW" kann höhere Flugdauer erreicht werden, welche unser Zeil obwohl H eine kleinere Standardabweichung hat, es gibt nur einen kleinen Unterschied. (Wenn wir dafür entscheiden können , hätten wir H Gebäude gewählt.,gatau good to say just leave it)
#nun wird untersucht, ob die Daten überhaupt normalverteilt ist. der Normality Test ermöglicht uns, das zu bestimmen.Die einzelnen Orten werden voneinander getrennt, damit wir die einzelnen Daten sehen können.#Nun wird ggplot benutzt, um die Daten von Ortsauswahl graphisch darzustellen. Hier werden Histogramm und QQplot verwendet.
#ortspezifische Betrachtung
ortauswahl_EW <- ortsauswahl_grouped %>% filter(Ort == "EW")
ortauswahl_ER <- ortsauswahl_grouped %>% filter(Ort == "ER")
ortauswahl_MA <- ortsauswahl_grouped %>% filter(Ort == "MA")
ortauswahl_H  <- ortsauswahl_grouped %>% filter(Ort == "H")
#cek data einzeln
#EW
histogram_EW<-  ggplot(data = ortauswahl_EW, mapping = aes(x = Flugdauer)) +
geom_histogram(bins = nclass.Sturges(ortauswahl_EW$Flugdauer)) +
theme_bw() +  labs(title = "EW")
qqplot_EW <- ggplot(mapping = aes(sample = ortauswahl_EW$Flugdauer)) +
geom_qq() +
geom_qq_line() +
xlab("Theoritical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("Normal Q-Q Plot") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "EW")
histogram_EW
qqplot_EW
#ER
histogram_ER<-  ggplot(data = ortauswahl_ER, mapping = aes(x = Flugdauer)) +
geom_histogram(bins = nclass.Sturges(ortauswahl_ER$Flugdauer)) +
theme_bw()+  labs(title = "ER")
qqplot_ER <- ggplot(mapping = aes(sample = ortauswahl_ER$Flugdauer)) +
geom_qq() +
geom_qq_line() +
xlab("Theoritical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("Normal Q-Q Plot") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "ER")
histogram_ER
qqplot_ER
#MA
histogram_MA<-  ggplot(data = ortauswahl_MA, mapping = aes(x = Flugdauer)) +
geom_histogram(bins = nclass.Sturges(ortauswahl_MA$Flugdauer)) +
theme_bw() +  labs(title = "MA")
qqplot_MA <- ggplot(mapping = aes(sample = ortauswahl_MA$Flugdauer)) +
geom_qq() +
geom_qq_line() +
xlab("Theoritical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("Normal Q-Q Plot") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "MA")
histogram_MA
qqplot_MA
#H
histogram_H<-  ggplot(data = ortauswahl_H, mapping = aes(x = Flugdauer)) +
geom_histogram(bins = nclass.Sturges(ortauswahl_H$Flugdauer)) +
theme_bw() +  labs(title = "H")
qqplot_H <- ggplot(mapping = aes(sample = ortauswahl_H$Flugdauer)) +
geom_qq() +
geom_qq_line() +
xlab("Theoritical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("Normal Q-Q Plot") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "H")
histogram_H
qqplot_H
#cek data als gesamt
#Betrachtung Data
histogram_gesamt <-  ggplot(data = ortauswahl, mapping = aes(x = Flugdauer)) +
geom_histogram(bins = nclass.Sturges(ortauswahl$Flugdauer)) +
theme_bw() +  labs(title = "Gesamt")
qqplot_gesamt <- ggplot(mapping = aes(sample = ortauswahl$Flugdauer)) +
geom_qq() +
geom_qq_line() +
xlab("Theoritical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("Normal Q-Q Plot") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Gesamt")
histogram_gesamt
qqplot_gesamt
pcr(ortauswahl$Flugdauer)
View(ortauswahl)
View(ortauswahl)
pcr(ortauswahl$Flugdauer)
ad.test(ortauswahl$Flugdauer)
pcr(standardisierung$Flugdauer)
ortauswahl$Flugdauer
pcr(ortauswahl$Flugdauer[1])
pcr(ortauswahl$Flugdauer[,1])
pcr(ortauswahl$Flugdauer[1,])
pcr(ortauswahl$Flugdauer[:])
ortauswahl$Flugdauer[;1]
ortauswahl$Flugdauer[1:1]
ortauswahl$Flugdauer[1:]
ortauswahl$Flugdauer[:,1]
ortauswahl$Flugdauer[,1]
ortauswahl$Flugdauer[1,1]
ortauswahl$Flugdauer[1]
ortauswahl$Flugdauer
ortauswahl$Flugdauer[2]
pcrdata <- ortauswahl$Flugdauer
pcr(pcrdata)
pcrdata
pcrdata <- lapply(ortauswahl$Flugdauer)
pcrdata <- lapply(ortauswahl$Flugdauer, as.numeric)
pcr(pcrdata)
View(pcrdata)
View(pcrdata)
View(pcrdata)
pcrdata <- as.list(ortauswahl$Flugdauer)
View(pcrdata)
View(pcrdata)
pcr(pcrdata$value)
pcrdata$value
pcrdata
pcr(standardisierung$Flugdauer)
#pcr(standardisierung$Flugdauer)
histogram_standardisierung <-  ggplot(data = standardisierung, mapping = aes(x = Flugdauer)) +
geom_histogram(bins = nclass.Sturges(standardisierung$Flugdauer)) +
theme_bw() +  labs(title = "Standardisierung")
qqplot_standardisierung <- ggplot(mapping = aes(sample = standardisierung$Flugdauer)) +
geom_qq() +
geom_qq_line() +
xlab("Theoritical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("Normal Q-Q Plot") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Standardisierung")
histogram_standardisierung
qqplot_standardisierung
standardisierung_mutated <- standardisierung %>%
mutate(mean_flugdauer = mean(Flugdauer), var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2))
standardisierung_summarized <- standardisierung %>%
summarize(mean_flugdauer = mean(Flugdauer), var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2))
standardisierung_mit_Cp <- standardisierung_summarized %>% mutate(Cp = Toleranz/(6*sd_flugdauer))
standardisierung_mit_Cp
#Hier könnte man direkt hinsehen, dass nach der Standardisierung das zu untersuchende Merkmal normalverteilt ist (QQplot von PCR oder ggnorm), mit Mean von 4,08 und sd von 0,169. Die Standardabweichung ist 0,4 (sollte 0,04 sein) Einheit größer als mit 5 Proben. Es ist aber nicht so schlimm, da die statistische Auswertung mit 5 Beobachtungen sowieso nicht so statistisch informativ ist. Der Cp Wert liegt unter 1,33, es gilt, dass der Prozess nicht fähig ist, es werden daher Verbesserungen benötigt. Der Cp Wert hat hier von 0,9 aus dem 1. Teil auf 1. Es ist aber immer noch nicht fähig.
##Hier könnte man direkt hinsehen, dass nach der Standardiesierung das zu untersuchende Merkmal normalverteilt ist (QQplot dr pcr ato qqnorm). mit mean 4.08, und sd = 0,169. Die Standardabweichung ist 0.4(ini keknya harusnza 0.04) Einheit größer als mit 5 Proben, nicht so schlimm da statistische Auswertung mit 5 Beobachtungen soweise nicht so statisitch informativ. Der Cp Wert liegt unter 1.33 es gilt also dass der Prozess nicht fähig ist, es werden Verbesserungen benötigt. Cuma Cp wert naik dari 0.9 teil 1 sekarang jadi 1, walaupun tetep g fähig.
#JANGAN LIAT ANALYSIS DARI PCR ITU BUAT STICHPROBEN BUKAN GRUNDGESAMTHEIT
#bikin datanya
#Als nächstes kommen wir zu dem Versuchsplan. Wir haben hier die Daten so sortiert, damit wir die Daten für die Flugdauer zusammenfügen können. Übersichtlichkeitshalber werden die anderen Daten außer Flugdauer zunächst in einen High-Low Wert zugeteilt.
if (!require(qualityTools)) {
install.packages("qualityTools")
require(qualityTools)
}
vp <- facDesign(
k = 4,
replicates = 2,
centerCube = 16
)
vp <- facDesign(
k = 4,
replicates = 2,
centerCube = 16
)
vp = facDesign(
k = 4,
replicates = 2,
centerCube = 16
)
vp.full = facDesign(k = 3)
